// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { useRouter } from "next/router";
import GlobalContextsProvider from "../components/plasmic/isv/PlasmicGlobalContextsProvider";
import { ScreenVariantProvider } from "../components/plasmic/isv/PlasmicGlobalVariant__Screen";
import { PlasmicCheckout2 } from "../components/plasmic/isv/PlasmicCheckout2";
import { useSnapshot } from "valtio";
import { state } from "../lib/state-management";
import ShoppingCartLineItem from "../components/ShoppingCartLineItem";
import { formatPrice } from "../lib/common";
import { getProductVariantPrice, updateCart } from "../lib/cart";
import { goToCheckout } from "../lib/checkout";

function isValidEmail(email: string) {
  return /\S+@\S+\.\S+/.test(email);
}

function Checkout() {
  const [ invalidState, setInvalidState ] = React.useState(false);

  const { cart, isCheckoutLoading, isAdmin } = useSnapshot(state);
  const { name, email, address, number, bairro } = cart as any;
  const { complemento, city, entrega } = cart as any;
  React.useEffect(() => {
    if (invalidState) {
      setInvalidState(false);
    }
  }, [name, email, address, number, bairro])
  const [ payment, setPayment ] = React.useState<string | undefined>("Dinheiro");
  const router = useRouter();

  const buildInput = (field: string, select?: boolean, defaultVal?: any) => ({
    value: (cart as any)[field] ?? defaultVal,
    onChange: (e: any) => (state as any).cart[field] = !select ? e.target.value : e,
  });

  return <PlasmicCheckout2
    lineItems={{
      children: cart.lineItems.map((item, i) => (
        <ShoppingCartLineItem
          index={i+1}
          name={item.product.product.fields.name}
          price={`R$ ${formatPrice(getProductVariantPrice(item.product) * item.quantity)}`}
          even={i%2 === 1}
          quantity={item.quantity}
          onChangeQuantity={(newQuantity) => updateCart(item.product, newQuantity)}
          product={item.product}
        />
      )
    )}}
    isEmpty={cart.lineItems.length === 0}
    totalPrice={cart.totalPrice.toFixed(2)}
    backBtn={{
      onClick: () => router.push("/")
    }}
    checkoutBtn={{
      isDisabled: cart.lineItems.length === 0,
      onClick: () => {
        if (
          (!isAdmin && 
            (!name || !email || !isValidEmail(email) || !address || !number || !bairro)
          ) ||
          (isAdmin && !payment)
        ) {
          setInvalidState(true);
        } else {
          goToCheckout(name, email, payment, router, { 
            address,
            number,
            complemento,
            bairro,
            city,
            entrega,
          });
        }
      }
    }}
    nameInput={buildInput("name")}
    emailInput={buildInput("email")}
    addressInput={buildInput("address")}
    numberInput={buildInput("number")}
    complementoInput={buildInput("complemento")}
    bairroInput={buildInput("bairro")}
    cityInput={buildInput("city", true, "sv")}
    entregaInput={buildInput("entrega", true, "12:00")}
    paymentInput={{
      value: payment,
      onChange: (e) => {
        setPayment(e ?? undefined);
        setInvalidState(false);
      }
    }}
    loading={{
      hide: !isCheckoutLoading
    }}
    invalidData={{
      render: (props, Component) => invalidState ? <Component {...props} /> : null
    }}
    isAdmin={isAdmin}
  />;
}

export default Checkout;
