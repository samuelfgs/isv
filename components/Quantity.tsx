// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicQuantity,
  DefaultQuantityProps
} from "./plasmic/isv/PlasmicQuantity";
import { HTMLElementRefOf } from "@plasmicapp/react-web";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface QuantityProps extends Omit<DefaultQuantityProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultQuantityProps altogether and have
// total control over the props for your component.
export interface QuantityProps extends DefaultQuantityProps {
  quantity: number;
  onChangeQuantity: (q: number) => void;
}

const isNumeric = (num: string) => !isNaN(+num);

function Quantity_(props: QuantityProps, ref: HTMLElementRefOf<"div">) {
  // Use PlasmicQuantity to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicQuantity are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, we are just piping all QuantityProps here, but feel free
  // to do whatever works for you.

  const { quantity, onChangeQuantity, ...rest } = props;
  return <PlasmicQuantity 
    root={{ ref }} 
    plusButton={{
      onClick: () => onChangeQuantity?.(quantity + 1)
    }}
    textInput={{
      value: quantity,
      onChange: (e) => {
        if (isNumeric(e.target.value))
          onChangeQuantity?.(+e.target.value);
      }
    }}
    minusButton={{
      onClick: () => onChangeQuantity?.(Math.max(0, quantity - 1))
    }}
    {...rest} 
  />;
}

const Quantity = React.forwardRef(Quantity_);
export default Quantity;
