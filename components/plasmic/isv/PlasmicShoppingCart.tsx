// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Kb5LCV89tNWBn4m3y5e9q
// Component: 2L-PECr0xw
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ShoppingCartLineItem from "../../ShoppingCartLineItem"; // plasmic-import: cnD_NnksTl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../copy_of_plasmic_kit_q_4_color_tokens/plasmic_copy_of_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: r6wqTHP8pUBDqvkAaarh3E/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_isv.module.css"; // plasmic-import: 7Kb5LCV89tNWBn4m3y5e9q/projectcss
import sty from "./PlasmicShoppingCart.module.css"; // plasmic-import: 2L-PECr0xw/css

import CartIcon from "./icons/PlasmicIcon__Cart"; // plasmic-import: TTU77nTGk/icon

export type PlasmicShoppingCart__VariantMembers = {
  isEmpty: "isEmpty";
};

export type PlasmicShoppingCart__VariantsArgs = {
  isEmpty?: SingleBooleanChoiceArg<"isEmpty">;
};

type VariantPropType = keyof PlasmicShoppingCart__VariantsArgs;
export const PlasmicShoppingCart__VariantProps = new Array<VariantPropType>(
  "isEmpty"
);

export type PlasmicShoppingCart__ArgsType = {};
type ArgPropType = keyof PlasmicShoppingCart__ArgsType;
export const PlasmicShoppingCart__ArgProps = new Array<ArgPropType>();

export type PlasmicShoppingCart__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  lineItems?: p.Flex<"div">;
};

export interface DefaultShoppingCartProps {
  isEmpty?: SingleBooleanChoiceArg<"isEmpty">;
  className?: string;
}

function PlasmicShoppingCart__RenderFunc(props: {
  variants: PlasmicShoppingCart__VariantsArgs;
  args: PlasmicShoppingCart__ArgsType;
  overrides: PlasmicShoppingCart__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
          plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
          sty.root
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__w6BA)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2UupG
            )}
          >
            {"Carrinho"}
          </div>

          <CartIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </p.Stack>

        {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__dK8WR, {
              [sty.freeBoxisEmpty__dK8WRyqkGv]: hasVariant(
                variants,
                "isEmpty",
                "isEmpty"
              )
            })}
          >
            {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__w92Vj,
                  {
                    [sty.textisEmpty__w92VjyqkGv]: hasVariant(
                      variants,
                      "isEmpty",
                      "isEmpty"
                    )
                  }
                )}
              >
                {"Nenhum item foi adicionado."}
              </div>
            ) : null}
          </div>
        ) : null}
        {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"lineItems"}
            data-plasmic-override={overrides.lineItems}
            hasGap={true}
            className={classNames(projectcss.all, sty.lineItems, {
              [sty.lineItemsisEmpty]: hasVariant(variants, "isEmpty", "isEmpty")
            })}
          >
            {true ? (
              <ShoppingCartLineItem
                className={classNames(
                  "__wab_instance",
                  sty.shoppingCartLineItem__tSkQ
                )}
              />
            ) : null}
            {true ? (
              <ShoppingCartLineItem
                className={classNames(
                  "__wab_instance",
                  sty.shoppingCartLineItem__fCQA
                )}
                even={true}
              />
            ) : null}
            {true ? (
              <ShoppingCartLineItem
                className={classNames(
                  "__wab_instance",
                  sty.shoppingCartLineItem__trP6
                )}
              />
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "lineItems"],
  svg: ["svg"],
  lineItems: ["lineItems"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  lineItems: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShoppingCart__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShoppingCart__VariantsArgs;
    args?: PlasmicShoppingCart__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShoppingCart__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShoppingCart__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicShoppingCart__ArgProps,
      internalVariantPropNames: PlasmicShoppingCart__VariantProps
    });

    return PlasmicShoppingCart__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShoppingCart";
  } else {
    func.displayName = `PlasmicShoppingCart.${nodeName}`;
  }
  return func;
}

export const PlasmicShoppingCart = Object.assign(
  // Top-level PlasmicShoppingCart renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    lineItems: makeNodeComponent("lineItems"),

    // Metadata about props expected for PlasmicShoppingCart
    internalVariantProps: PlasmicShoppingCart__VariantProps,
    internalArgProps: PlasmicShoppingCart__ArgProps
  }
);

export default PlasmicShoppingCart;
/* prettier-ignore-end */
