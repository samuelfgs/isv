// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Kb5LCV89tNWBn4m3y5e9q
// Component: jepsdtzBQs
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../copy_of_plasmic_kit_q_4_color_tokens/plasmic_copy_of_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: r6wqTHP8pUBDqvkAaarh3E/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_isv.module.css"; // plasmic-import: 7Kb5LCV89tNWBn4m3y5e9q/projectcss
import sty from "./PlasmicEmptyMessage.module.css"; // plasmic-import: jepsdtzBQs/css

export type PlasmicEmptyMessage__VariantMembers = {
  isEmpty: "isEmpty";
};

export type PlasmicEmptyMessage__VariantsArgs = {
  isEmpty?: SingleBooleanChoiceArg<"isEmpty">;
};

type VariantPropType = keyof PlasmicEmptyMessage__VariantsArgs;
export const PlasmicEmptyMessage__VariantProps = new Array<VariantPropType>(
  "isEmpty"
);

export type PlasmicEmptyMessage__ArgsType = {};
type ArgPropType = keyof PlasmicEmptyMessage__ArgsType;
export const PlasmicEmptyMessage__ArgProps = new Array<ArgPropType>();

export type PlasmicEmptyMessage__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultEmptyMessageProps {
  isEmpty?: SingleBooleanChoiceArg<"isEmpty">;
  className?: string;
}

function PlasmicEmptyMessage__RenderFunc(props: {
  variants: PlasmicEmptyMessage__VariantsArgs;
  args: PlasmicEmptyMessage__ArgsType;
  overrides: PlasmicEmptyMessage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.__wab_text,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootisEmpty]: hasVariant(variants, "isEmpty", "isEmpty") }
      )}
    >
      {"Nenhum item adicionado"}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEmptyMessage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEmptyMessage__VariantsArgs;
    args?: PlasmicEmptyMessage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEmptyMessage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEmptyMessage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEmptyMessage__ArgProps,
      internalVariantPropNames: PlasmicEmptyMessage__VariantProps
    });

    return PlasmicEmptyMessage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmptyMessage";
  } else {
    func.displayName = `PlasmicEmptyMessage.${nodeName}`;
  }
  return func;
}

export const PlasmicEmptyMessage = Object.assign(
  // Top-level PlasmicEmptyMessage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicEmptyMessage
    internalVariantProps: PlasmicEmptyMessage__VariantProps,
    internalArgProps: PlasmicEmptyMessage__ArgProps
  }
);

export default PlasmicEmptyMessage;
/* prettier-ignore-end */
