// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Kb5LCV89tNWBn4m3y5e9q
// Component: ePzZ4YqBZo
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ContentfulFetcher } from "../../contentful"; // plasmic-import: AIFoPRZ0EI/codeComponent
import AddItemOption from "../../AddItemOption"; // plasmic-import: hCmOmN_odDK/component
import ScrollSpace from "../../ScrollSpace"; // plasmic-import: YP00OeXrv1/component
import Button from "../../Button"; // plasmic-import: dTivG-jH3lW/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../copy_of_plasmic_kit_q_4_color_tokens/plasmic_copy_of_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: r6wqTHP8pUBDqvkAaarh3E/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_isv.module.css"; // plasmic-import: 7Kb5LCV89tNWBn4m3y5e9q/projectcss
import sty from "./PlasmicAddItem2.module.css"; // plasmic-import: ePzZ4YqBZo/css

import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: lKoMckLAP/icon
import CartIcon from "./icons/PlasmicIcon__Cart"; // plasmic-import: TTU77nTGk/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: k5kwo7sOrBj/icon

export type PlasmicAddItem2__VariantMembers = {};

export type PlasmicAddItem2__VariantsArgs = {};
type VariantPropType = keyof PlasmicAddItem2__VariantsArgs;
export const PlasmicAddItem2__VariantProps = new Array<VariantPropType>();

export type PlasmicAddItem2__ArgsType = {
  entryId?: string;
  total?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAddItem2__ArgsType;
export const PlasmicAddItem2__ArgProps = new Array<ArgPropType>(
  "entryId",
  "total"
);

export type PlasmicAddItem2__OverridesType = {
  root?: p.Flex<"div">;
  contentfulFetcher?: p.Flex<typeof ContentfulFetcher>;
  back?: p.Flex<"div">;
  addItemOption?: p.Flex<typeof AddItemOption>;
  scrollSpace?: p.Flex<typeof ScrollSpace>;
  footer?: p.Flex<"div">;
  selectedOptionValues?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultAddItem2Props {
  entryId?: string;
  total?: React.ReactNode;
  className?: string;
}

function PlasmicAddItem2__RenderFunc(props: {
  variants: PlasmicAddItem2__VariantsArgs;
  args: PlasmicAddItem2__ArgsType;
  overrides: PlasmicAddItem2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          entryId: "3fyN1VIDXA7pfvc8krzKCx" as const
        },
        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <ContentfulFetcher
        data-plasmic-name={"contentfulFetcher"}
        data-plasmic-override={overrides.contentfulFetcher}
        className={classNames("__wab_instance", sty.contentfulFetcher)}
        contentType={"eventMenuItem" as const}
        entryID={args.entryId}
        limit={1000 as const}
        noLayout={true}
      >
        <ph.DataCtxReader>
          {$ctx => (
            <>
              <div className={classNames(projectcss.all, sty.freeBox___1BbWp)}>
                <div className={classNames(projectcss.all, sty.freeBox__mR24D)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jPivk
                    )}
                  >
                    {(() => {
                      try {
                        return $ctx.contentfulEventmenuitemItem.fields.name;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Combo Pastel";
                        }
                        throw e;
                      }
                    })()}
                  </div>
                </div>

                <div
                  data-plasmic-name={"back"}
                  data-plasmic-override={overrides.back}
                  className={classNames(projectcss.all, sty.back)}
                >
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__p2GHb)}
                    role={"img"}
                  />
                </div>
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jphdh
                )}
              >
                {"Escolha sua opção"}
              </div>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cw7B)}
                >
                  {true
                    ? (() => {
                        try {
                          return (
                            $ctx.contentfulEventmenuitemItem?.fields.options ??
                            []
                          );
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return [];
                          }
                          throw e;
                        }
                      })().map((currentItem, currentIndex) => (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6Pw6B
                          )}
                        >
                          <AddItemOption
                            data-plasmic-name={"addItemOption"}
                            data-plasmic-override={overrides.addItemOption}
                            className={classNames(
                              "__wab_instance",
                              sty.addItemOption
                            )}
                            id={currentItem.sys.id}
                          />
                        </div>
                      ))
                    : null}
                </p.Stack>
              ) : null}

              <ScrollSpace
                data-plasmic-name={"scrollSpace"}
                data-plasmic-override={overrides.scrollSpace}
                className={classNames("__wab_instance", sty.scrollSpace)}
                height={200 as const}
              />

              <div
                data-plasmic-name={"footer"}
                data-plasmic-override={overrides.footer}
                className={classNames(projectcss.all, sty.footer)}
                id={"footer" as const}
              >
                <div className={classNames(projectcss.all, sty.freeBox__eJscO)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sSerp
                    )}
                  >
                    {(() => {
                      try {
                        return $ctx.contentfulEventmenuitemItem.fields.name;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Combo Japa";
                        }
                        throw e;
                      }
                    })()}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__cQd1X)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (() => {
                        try {
                          return (
                            "R$ " +
                            $ctx.contentfulEventmenuitemItem.fields.price.toFixed(
                              2
                            )
                          );
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "R$ 20,00";
                          }
                          throw e;
                        }
                      })(),
                      value: args.total,
                      className: classNames(sty.slotTargetTotal)
                    })}
                  </div>
                </div>

                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"selectedOptionValues"}
                    data-plasmic-override={overrides.selectedOptionValues}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.selectedOptionValues
                    )}
                  />
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__axdVo)}
                  >
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      color={"blue" as const}
                      isDisabled={true}
                      showStartIcon={true}
                      startIcon={
                        <CartIcon
                          className={classNames(projectcss.all, sty.svg__csCb)}
                          role={"img"}
                        />
                      }
                    >
                      {"Adicionar ao Carrinho"}
                    </Button>
                  </div>
                ) : null}
              </div>
            </>
          )}
        </ph.DataCtxReader>
      </ContentfulFetcher>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "contentfulFetcher",
    "back",
    "addItemOption",
    "scrollSpace",
    "footer",
    "selectedOptionValues",
    "button"
  ],
  contentfulFetcher: [
    "contentfulFetcher",
    "back",
    "addItemOption",
    "scrollSpace",
    "footer",
    "selectedOptionValues",
    "button"
  ],
  back: ["back"],
  addItemOption: ["addItemOption"],
  scrollSpace: ["scrollSpace"],
  footer: ["footer", "selectedOptionValues", "button"],
  selectedOptionValues: ["selectedOptionValues"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  contentfulFetcher: typeof ContentfulFetcher;
  back: "div";
  addItemOption: typeof AddItemOption;
  scrollSpace: typeof ScrollSpace;
  footer: "div";
  selectedOptionValues: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddItem2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddItem2__VariantsArgs;
    args?: PlasmicAddItem2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAddItem2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAddItem2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAddItem2__ArgProps,
          internalVariantPropNames: PlasmicAddItem2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAddItem2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddItem2";
  } else {
    func.displayName = `PlasmicAddItem2.${nodeName}`;
  }
  return func;
}

export const PlasmicAddItem2 = Object.assign(
  // Top-level PlasmicAddItem2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentfulFetcher: makeNodeComponent("contentfulFetcher"),
    back: makeNodeComponent("back"),
    addItemOption: makeNodeComponent("addItemOption"),
    scrollSpace: makeNodeComponent("scrollSpace"),
    footer: makeNodeComponent("footer"),
    selectedOptionValues: makeNodeComponent("selectedOptionValues"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicAddItem2
    internalVariantProps: PlasmicAddItem2__VariantProps,
    internalArgProps: PlasmicAddItem2__ArgProps
  }
);

export default PlasmicAddItem2;
/* prettier-ignore-end */
