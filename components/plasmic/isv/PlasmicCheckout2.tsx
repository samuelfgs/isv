// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Kb5LCV89tNWBn4m3y5e9q
// Component: ltXxspJq1s-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: oeaZd66p84/component
import ShoppingCartLineItem from "../../ShoppingCartLineItem"; // plasmic-import: cnD_NnksTl/component
import TextInput from "../../TextInput"; // plasmic-import: ZCE1TfqnzIq/component
import Select from "../../Select"; // plasmic-import: SLXk4W2FZwu/component
import Select__Option from "../../Select__Option"; // plasmic-import: 55Afek_4-RC/component
import Button from "../../Button"; // plasmic-import: dTivG-jH3lW/component
import Loading from "../../Loading"; // plasmic-import: 3JMpsqmVnQ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../copy_of_plasmic_kit_q_4_color_tokens/plasmic_copy_of_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: r6wqTHP8pUBDqvkAaarh3E/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_isv.module.css"; // plasmic-import: 7Kb5LCV89tNWBn4m3y5e9q/projectcss
import sty from "./PlasmicCheckout2.module.css"; // plasmic-import: ltXxspJq1s-/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: AUsPFN29Z5Y/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: q1TlDUyNqop/icon
import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: TZ5ExugZ2/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: k5kwo7sOrBj/icon

createPlasmicElementProxy;

export type PlasmicCheckout2__VariantMembers = {
  isEmpty: "isEmpty";
  isAdmin: "isAdmin";
};
export type PlasmicCheckout2__VariantsArgs = {
  isEmpty?: SingleBooleanChoiceArg<"isEmpty">;
  isAdmin?: SingleBooleanChoiceArg<"isAdmin">;
};
type VariantPropType = keyof PlasmicCheckout2__VariantsArgs;
export const PlasmicCheckout2__VariantProps = new Array<VariantPropType>(
  "isEmpty",
  "isAdmin"
);

export type PlasmicCheckout2__ArgsType = {
  totalPrice?: React.ReactNode;
  formasDePagamento?: any;
};
type ArgPropType = keyof PlasmicCheckout2__ArgsType;
export const PlasmicCheckout2__ArgProps = new Array<ArgPropType>(
  "totalPrice",
  "formasDePagamento"
);

export type PlasmicCheckout2__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  lineItems?: Flex__<"div">;
  invalidData?: Flex__<"div">;
  nameInput?: Flex__<typeof TextInput>;
  emailInput?: Flex__<typeof TextInput>;
  addressInput?: Flex__<typeof TextInput>;
  numberInput?: Flex__<typeof TextInput>;
  complementoInput?: Flex__<typeof TextInput>;
  bairroInput?: Flex__<typeof TextInput>;
  cityInput?: Flex__<typeof Select>;
  entregaInput?: Flex__<typeof Select>;
  paymentInput?: Flex__<typeof Select>;
  option?: Flex__<typeof Select__Option>;
  backBtn?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
  checkoutBtn?: Flex__<typeof Button>;
  loading?: Flex__<typeof Loading>;
};

export interface DefaultCheckout2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCheckout2__RenderFunc(props: {
  variants: PlasmicCheckout2__VariantsArgs;
  args: PlasmicCheckout2__ArgsType;
  overrides: PlasmicCheckout2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          formasDePagamento: ["Dinheiro", "Pix", "Credito", "Debito"]
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isEmpty",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isEmpty
      },
      {
        path: "isAdmin",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isAdmin
      },
      {
        path: "nameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "paymentInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Dinheiro"
      },
      {
        path: "addressInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "complementoInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "bairroInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "cityInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "sv"
      },
      {
        path: "entregaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "12:00"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootisAdmin]: hasVariant($state, "isAdmin", "isAdmin"),
              [sty.rootisEmpty]: hasVariant($state, "isEmpty", "isEmpty")
            }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            className={classNames(projectcss.all, sty.freeBox___2IyZm, {
              [sty.freeBoxisEmpty___2IyZm7Xt6O]: hasVariant(
                $state,
                "isEmpty",
                "isEmpty"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wGvA,
                {
                  [sty.textisEmpty__wGvA7Xt6O]: hasVariant(
                    $state,
                    "isEmpty",
                    "isEmpty"
                  )
                }
              )}
            >
              {"Nenhum item foi adicionado."}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___7U9Bb, {
              [sty.freeBoxisEmpty___7U9Bb7Xt6O]: hasVariant(
                $state,
                "isEmpty",
                "isEmpty"
              )
            })}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"lineItems"}
              data-plasmic-override={overrides.lineItems}
              hasGap={true}
              className={classNames(projectcss.all, sty.lineItems)}
            >
              <ShoppingCartLineItem
                className={classNames(
                  "__wab_instance",
                  sty.shoppingCartLineItem___4Dhpx,
                  {
                    [sty.shoppingCartLineItemisEmpty___4Dhpx7Xt6O]: hasVariant(
                      $state,
                      "isEmpty",
                      "isEmpty"
                    )
                  }
                )}
                even={true}
              />

              <ShoppingCartLineItem
                className={classNames(
                  "__wab_instance",
                  sty.shoppingCartLineItem__oyfOz
                )}
              />

              <ShoppingCartLineItem
                className={classNames(
                  "__wab_instance",
                  sty.shoppingCartLineItem__ilfho
                )}
                even={true}
              />
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ykaXx, {
              [sty.freeBoxisAdmin__ykaXxbaKz0]: hasVariant(
                $state,
                "isAdmin",
                "isAdmin"
              ),
              [sty.freeBoxisEmpty__ykaXx7Xt6O]: hasVariant(
                $state,
                "isEmpty",
                "isEmpty"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__jyRmg, {
                [sty.freeBoxisAdmin__jyRmgbaKz0]: hasVariant(
                  $state,
                  "isAdmin",
                  "isAdmin"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bdrZd
                )}
              >
                {"Total: R$ "}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ozBb8)}>
                {renderPlasmicSlot({
                  defaultContents: "20,00",
                  value: args.totalPrice,
                  className: classNames(sty.slotTargetTotalPrice)
                })}
              </div>
            </div>
            <div
              data-plasmic-name={"invalidData"}
              data-plasmic-override={overrides.invalidData}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.invalidData,
                {
                  [sty.invalidDataisAdmin]: hasVariant(
                    $state,
                    "isAdmin",
                    "isAdmin"
                  ),
                  [sty.invalidDataisEmpty]: hasVariant(
                    $state,
                    "isEmpty",
                    "isEmpty"
                  )
                }
              )}
            >
              {"Dados inv\u00e1lidos"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mqfv, {
                [sty.freeBoxisAdmin__mqfvBaKz0]: hasVariant(
                  $state,
                  "isAdmin",
                  "isAdmin"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hITsI,
                  {
                    [sty.textisAdmin__hITsIbaKz0]: hasVariant(
                      $state,
                      "isAdmin",
                      "isAdmin"
                    )
                  }
                )}
              >
                {"Nome"}
              </div>
              <TextInput
                data-plasmic-name={"nameInput"}
                data-plasmic-override={overrides.nameInput}
                className={classNames("__wab_instance", sty.nameInput)}
                name={"name"}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["nameInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={""}
                required={true}
                value={
                  generateStateValueProp($state, ["nameInput", "value"]) ?? ""
                }
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kIt60, {
                [sty.freeBoxisAdmin__kIt60BaKz0]: hasVariant(
                  $state,
                  "isAdmin",
                  "isAdmin"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__voMEq,
                  {
                    [sty.textisAdmin__voMEqbaKz0]: hasVariant(
                      $state,
                      "isAdmin",
                      "isAdmin"
                    )
                  }
                )}
              >
                {"Email"}
              </div>
              <TextInput
                data-plasmic-name={"emailInput"}
                data-plasmic-override={overrides.emailInput}
                className={classNames("__wab_instance", sty.emailInput)}
                name={"name"}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["emailInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={""}
                required={true}
                value={
                  generateStateValueProp($state, ["emailInput", "value"]) ?? ""
                }
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kHqHn, {
                [sty.freeBoxisAdmin__kHqHNbaKz0]: hasVariant(
                  $state,
                  "isAdmin",
                  "isAdmin"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7LjbN,
                  {
                    [sty.textisAdmin___7LjbNbaKz0]: hasVariant(
                      $state,
                      "isAdmin",
                      "isAdmin"
                    )
                  }
                )}
              >
                {"Endere\u00e7o"}
              </div>
              <TextInput
                data-plasmic-name={"addressInput"}
                data-plasmic-override={overrides.addressInput}
                className={classNames("__wab_instance", sty.addressInput)}
                name={"address"}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["addressInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={""}
                required={true}
                value={
                  generateStateValueProp($state, ["addressInput", "value"]) ??
                  ""
                }
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xrZj6, {
                [sty.freeBoxisAdmin__xrZj6BaKz0]: hasVariant(
                  $state,
                  "isAdmin",
                  "isAdmin"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__agWj,
                  {
                    [sty.textisAdmin__agWjbaKz0]: hasVariant(
                      $state,
                      "isAdmin",
                      "isAdmin"
                    )
                  }
                )}
              >
                {"N\u00famero"}
              </div>
              <TextInput
                data-plasmic-name={"numberInput"}
                data-plasmic-override={overrides.numberInput}
                className={classNames("__wab_instance", sty.numberInput)}
                name={"number"}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["numberInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={""}
                required={true}
                value={
                  generateStateValueProp($state, ["numberInput", "value"]) ?? ""
                }
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__t7DLq, {
                [sty.freeBoxisAdmin__t7DLqbaKz0]: hasVariant(
                  $state,
                  "isAdmin",
                  "isAdmin"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__plh5K,
                  {
                    [sty.textisAdmin__plh5KbaKz0]: hasVariant(
                      $state,
                      "isAdmin",
                      "isAdmin"
                    )
                  }
                )}
              >
                {"Complemento"}
              </div>
              <TextInput
                data-plasmic-name={"complementoInput"}
                data-plasmic-override={overrides.complementoInput}
                className={classNames("__wab_instance", sty.complementoInput)}
                name={"complemento"}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "complementoInput",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }}
                placeholder={""}
                required={false}
                value={
                  generateStateValueProp($state, [
                    "complementoInput",
                    "value"
                  ]) ?? ""
                }
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xs0Ds, {
                [sty.freeBoxisAdmin__xs0DsbaKz0]: hasVariant(
                  $state,
                  "isAdmin",
                  "isAdmin"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__b3D8X,
                  {
                    [sty.textisAdmin__b3D8XbaKz0]: hasVariant(
                      $state,
                      "isAdmin",
                      "isAdmin"
                    )
                  }
                )}
              >
                {"Bairro"}
              </div>
              <TextInput
                data-plasmic-name={"bairroInput"}
                data-plasmic-override={overrides.bairroInput}
                className={classNames("__wab_instance", sty.bairroInput)}
                name={"bairro"}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["bairroInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={""}
                required={false}
                value={
                  generateStateValueProp($state, ["bairroInput", "value"]) ?? ""
                }
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rwAk0, {
                [sty.freeBoxisAdmin__rwAk0BaKz0]: hasVariant(
                  $state,
                  "isAdmin",
                  "isAdmin"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pxMmG,
                  {
                    [sty.textisAdmin__pxMmGbaKz0]: hasVariant(
                      $state,
                      "isAdmin",
                      "isAdmin"
                    )
                  }
                )}
              >
                {"Cidade"}
              </div>
              <Select
                data-plasmic-name={"cityInput"}
                data-plasmic-override={overrides.cityInput}
                className={classNames("__wab_instance", sty.cityInput)}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["cityInput", "value"])(
                    eventArgs[0]
                  );
                }}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null },
                    { value: null, label: null }
                  ];
                  __composite["0"]["value"] = "sv";
                  __composite["0"]["label"] = "S\u00e3o Vicente";
                  __composite["1"]["value"] = "santos";
                  __composite["1"]["label"] = "Santos";
                  __composite["2"]["value"] = "pg";
                  __composite["2"]["label"] = "Praia Grande";
                  return __composite;
                })()}
                value={generateStateValueProp($state, ["cityInput", "value"])}
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rZlsc, {
                [sty.freeBoxisAdmin__rZlscbaKz0]: hasVariant(
                  $state,
                  "isAdmin",
                  "isAdmin"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__clar,
                  {
                    [sty.textisAdmin__clarbaKz0]: hasVariant(
                      $state,
                      "isAdmin",
                      "isAdmin"
                    )
                  }
                )}
              >
                {"Entrega"}
              </div>
              <Select
                data-plasmic-name={"entregaInput"}
                data-plasmic-override={overrides.entregaInput}
                className={classNames("__wab_instance", sty.entregaInput)}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["entregaInput", "value"])(
                    eventArgs[0]
                  );
                }}
                options={(() => {
                  try {
                    return [
                      "11:30",
                      "12:00",
                      "12:30",
                      "13:00",
                      "13:30",
                      "14:00"
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                value={generateStateValueProp($state, [
                  "entregaInput",
                  "value"
                ])}
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__s4Ns9, {
                [sty.freeBoxisAdmin__s4Ns9BaKz0]: hasVariant(
                  $state,
                  "isAdmin",
                  "isAdmin"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kOb1Q,
                  {
                    [sty.textisAdmin__kOb1QbaKz0]: hasVariant(
                      $state,
                      "isAdmin",
                      "isAdmin"
                    )
                  }
                )}
              >
                {"Forma de Pagamento"}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__uoz1Z, {
                  [sty.freeBoxisAdmin__uoz1ZbaKz0]: hasVariant(
                    $state,
                    "isAdmin",
                    "isAdmin"
                  )
                })}
              >
                <Select
                  data-plasmic-name={"paymentInput"}
                  data-plasmic-override={overrides.paymentInput}
                  className={classNames("__wab_instance", sty.paymentInput, {
                    [sty.paymentInputisAdmin]: hasVariant(
                      $state,
                      "isAdmin",
                      "isAdmin"
                    )
                  })}
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "paymentInput",
                      "value"
                    ])(eventArgs[0]);
                  }}
                  value={generateStateValueProp($state, [
                    "paymentInput",
                    "value"
                  ])}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $props.formasDePagamento;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Select__Option
                        data-plasmic-name={"option"}
                        data-plasmic-override={overrides.option}
                        className={classNames("__wab_instance", sty.option)}
                        key={currentIndex}
                        textValue={currentItem}
                        value={(() => {
                          try {
                            return currentItem;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Pix";
                            }
                            throw e;
                          }
                        })()}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Option 2";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </Select__Option>
                    );
                  })}
                </Select>
              </div>
            </Stack__>
            <div
              className={classNames(projectcss.all, sty.freeBox__t6Fu, {
                [sty.freeBoxisAdmin__t6FUbaKz0]: hasVariant(
                  $state,
                  "isAdmin",
                  "isAdmin"
                )
              })}
            >
              <Button
                data-plasmic-name={"backBtn"}
                data-plasmic-override={overrides.backBtn}
                className={classNames("__wab_instance", sty.backBtn)}
                color={"softBlue"}
                showStartIcon={true}
                startIcon={
                  <PlusIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zYd5
                  )}
                >
                  {"Adicionar mais"}
                </div>
              </Button>
              <Button
                data-plasmic-name={"checkoutBtn"}
                data-plasmic-override={overrides.checkoutBtn}
                className={classNames("__wab_instance", sty.checkoutBtn)}
                color={"blue"}
                showStartIcon={true}
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nUFh
                  )}
                >
                  {"Finalizar compra"}
                </div>
              </Button>
            </div>
          </Stack__>
          <Loading
            data-plasmic-name={"loading"}
            data-plasmic-override={overrides.loading}
            className={classNames("__wab_instance", sty.loading)}
            hide={true}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "lineItems",
    "invalidData",
    "nameInput",
    "emailInput",
    "addressInput",
    "numberInput",
    "complementoInput",
    "bairroInput",
    "cityInput",
    "entregaInput",
    "paymentInput",
    "option",
    "backBtn",
    "svg",
    "checkoutBtn",
    "loading"
  ],
  header: ["header"],
  lineItems: ["lineItems"],
  invalidData: ["invalidData"],
  nameInput: ["nameInput"],
  emailInput: ["emailInput"],
  addressInput: ["addressInput"],
  numberInput: ["numberInput"],
  complementoInput: ["complementoInput"],
  bairroInput: ["bairroInput"],
  cityInput: ["cityInput"],
  entregaInput: ["entregaInput"],
  paymentInput: ["paymentInput", "option"],
  option: ["option"],
  backBtn: ["backBtn", "svg"],
  svg: ["svg"],
  checkoutBtn: ["checkoutBtn"],
  loading: ["loading"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  lineItems: "div";
  invalidData: "div";
  nameInput: typeof TextInput;
  emailInput: typeof TextInput;
  addressInput: typeof TextInput;
  numberInput: typeof TextInput;
  complementoInput: typeof TextInput;
  bairroInput: typeof TextInput;
  cityInput: typeof Select;
  entregaInput: typeof Select;
  paymentInput: typeof Select;
  option: typeof Select__Option;
  backBtn: typeof Button;
  svg: "svg";
  checkoutBtn: typeof Button;
  loading: typeof Loading;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCheckout2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCheckout2__VariantsArgs;
    args?: PlasmicCheckout2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCheckout2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCheckout2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCheckout2__ArgProps,
          internalVariantPropNames: PlasmicCheckout2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCheckout2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheckout2";
  } else {
    func.displayName = `PlasmicCheckout2.${nodeName}`;
  }
  return func;
}

export const PlasmicCheckout2 = Object.assign(
  // Top-level PlasmicCheckout2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    lineItems: makeNodeComponent("lineItems"),
    invalidData: makeNodeComponent("invalidData"),
    nameInput: makeNodeComponent("nameInput"),
    emailInput: makeNodeComponent("emailInput"),
    addressInput: makeNodeComponent("addressInput"),
    numberInput: makeNodeComponent("numberInput"),
    complementoInput: makeNodeComponent("complementoInput"),
    bairroInput: makeNodeComponent("bairroInput"),
    cityInput: makeNodeComponent("cityInput"),
    entregaInput: makeNodeComponent("entregaInput"),
    paymentInput: makeNodeComponent("paymentInput"),
    option: makeNodeComponent("option"),
    backBtn: makeNodeComponent("backBtn"),
    svg: makeNodeComponent("svg"),
    checkoutBtn: makeNodeComponent("checkoutBtn"),
    loading: makeNodeComponent("loading"),

    // Metadata about props expected for PlasmicCheckout2
    internalVariantProps: PlasmicCheckout2__VariantProps,
    internalArgProps: PlasmicCheckout2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCheckout2;
/* prettier-ignore-end */
