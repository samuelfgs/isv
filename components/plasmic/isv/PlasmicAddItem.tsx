// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Kb5LCV89tNWBn4m3y5e9q
// Component: vHTuRfYzkk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: oeaZd66p84/component
import { ContentfulFetcher } from "../../contentful"; // plasmic-import: AIFoPRZ0EI/codeComponent
import AddItemOption from "../../AddItemOption"; // plasmic-import: hCmOmN_odDK/component
import ScrollSpace from "../../ScrollSpace"; // plasmic-import: YP00OeXrv1/component
import Button from "../../Button"; // plasmic-import: dTivG-jH3lW/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../copy_of_plasmic_kit_q_4_color_tokens/plasmic_copy_of_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: r6wqTHP8pUBDqvkAaarh3E/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_isv.module.css"; // plasmic-import: 7Kb5LCV89tNWBn4m3y5e9q/projectcss
import sty from "./PlasmicAddItem.module.css"; // plasmic-import: vHTuRfYzkk/css

import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: lKoMckLAP/icon
import CartIcon from "./icons/PlasmicIcon__Cart"; // plasmic-import: TTU77nTGk/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: k5kwo7sOrBj/icon

createPlasmicElementProxy;

export type PlasmicAddItem__VariantMembers = {};
export type PlasmicAddItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicAddItem__VariantsArgs;
export const PlasmicAddItem__VariantProps = new Array<VariantPropType>();

export type PlasmicAddItem__ArgsType = {
  total?: React.ReactNode;
  entryId?: string;
};
type ArgPropType = keyof PlasmicAddItem__ArgsType;
export const PlasmicAddItem__ArgProps = new Array<ArgPropType>(
  "total",
  "entryId"
);

export type PlasmicAddItem__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  contentfulFetcher?: Flex__<typeof ContentfulFetcher>;
  back?: Flex__<"div">;
  addItemOption?: Flex__<typeof AddItemOption>;
  scrollSpace?: Flex__<typeof ScrollSpace>;
  footer?: Flex__<"div">;
  selectedOptionValues?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultAddItemProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAddItem__RenderFunc(props: {
  variants: PlasmicAddItem__VariantsArgs;
  args: PlasmicAddItem__ArgsType;
  overrides: PlasmicAddItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          entryId: "mHfexEU5q4uAOdRq2w7zu"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <ContentfulFetcher
            data-plasmic-name={"contentfulFetcher"}
            data-plasmic-override={overrides.contentfulFetcher}
            className={classNames("__wab_instance", sty.contentfulFetcher)}
            contentType={"eventMenuItem"}
            entryID={args.entryId}
            limit={1000}
            noLayout={true}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__t5NS)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vamCt)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mLb7K
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.contentfulEventmenuitemItem.fields
                                .name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Combo Pastel";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"back"}
                      data-plasmic-override={overrides.back}
                      className={classNames(projectcss.all, sty.back)}
                    >
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg__oDfUv)}
                        role={"img"}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jphdh
                    )}
                  >
                    {"Escolha sua op\u00e7\u00e3o"}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__cw7B)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (
                            $ctx.contentfulEventmenuitemItem?.fields.options ??
                            []
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6Pw6B
                          )}
                          key={currentIndex}
                        >
                          <AddItemOption
                            data-plasmic-name={"addItemOption"}
                            data-plasmic-override={overrides.addItemOption}
                            className={classNames(
                              "__wab_instance",
                              sty.addItemOption
                            )}
                            id={(() => {
                              try {
                                return currentItem.sys.id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      );
                    })}
                  </Stack__>
                  <ScrollSpace
                    data-plasmic-name={"scrollSpace"}
                    data-plasmic-override={overrides.scrollSpace}
                    className={classNames("__wab_instance", sty.scrollSpace)}
                    height={200}
                  />

                  <div
                    data-plasmic-name={"footer"}
                    data-plasmic-override={overrides.footer}
                    className={classNames(projectcss.all, sty.footer)}
                    id={"footer"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eJscO)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sSerp
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.contentfulEventmenuitemItem.fields
                                .name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Combo Japa";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cQd1X
                        )}
                      >
                        {renderPlasmicSlot({
                          defaultContents: (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "R$ " +
                                    $ctx.contentfulEventmenuitemItem.fields.price.toFixed(
                                      2
                                    )
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "R$ 20,00";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ),
                          value: args.total,
                          className: classNames(sty.slotTargetTotal)
                        })}
                      </div>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"selectedOptionValues"}
                      data-plasmic-override={overrides.selectedOptionValues}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.selectedOptionValues
                      )}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__axdVo)}
                    >
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        color={"blue"}
                        isDisabled={true}
                        showStartIcon={true}
                        startIcon={
                          <CartIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fshV5
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        {"Adicionar ao Carrinho"}
                      </Button>
                    </div>
                  </div>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ContentfulFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "contentfulFetcher",
    "back",
    "addItemOption",
    "scrollSpace",
    "footer",
    "selectedOptionValues",
    "button"
  ],
  header: ["header"],
  contentfulFetcher: [
    "contentfulFetcher",
    "back",
    "addItemOption",
    "scrollSpace",
    "footer",
    "selectedOptionValues",
    "button"
  ],
  back: ["back"],
  addItemOption: ["addItemOption"],
  scrollSpace: ["scrollSpace"],
  footer: ["footer", "selectedOptionValues", "button"],
  selectedOptionValues: ["selectedOptionValues"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  contentfulFetcher: typeof ContentfulFetcher;
  back: "div";
  addItemOption: typeof AddItemOption;
  scrollSpace: typeof ScrollSpace;
  footer: "div";
  selectedOptionValues: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddItem__VariantsArgs;
    args?: PlasmicAddItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAddItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAddItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAddItem__ArgProps,
          internalVariantPropNames: PlasmicAddItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddItem";
  } else {
    func.displayName = `PlasmicAddItem.${nodeName}`;
  }
  return func;
}

export const PlasmicAddItem = Object.assign(
  // Top-level PlasmicAddItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    contentfulFetcher: makeNodeComponent("contentfulFetcher"),
    back: makeNodeComponent("back"),
    addItemOption: makeNodeComponent("addItemOption"),
    scrollSpace: makeNodeComponent("scrollSpace"),
    footer: makeNodeComponent("footer"),
    selectedOptionValues: makeNodeComponent("selectedOptionValues"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicAddItem
    internalVariantProps: PlasmicAddItem__VariantProps,
    internalArgProps: PlasmicAddItem__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAddItem;
/* prettier-ignore-end */
