// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Kb5LCV89tNWBn4m3y5e9q
// Component: jvNNS1u1VD
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: oeaZd66p84/component
import ShoppingCartLineItem from "../../ShoppingCartLineItem"; // plasmic-import: cnD_NnksTl/component
import TextInput from "../../TextInput"; // plasmic-import: ZCE1TfqnzIq/component
import Button from "../../Button"; // plasmic-import: dTivG-jH3lW/component
import Loading from "../../Loading"; // plasmic-import: 3JMpsqmVnQ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../copy_of_plasmic_kit_q_4_color_tokens/plasmic_copy_of_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: r6wqTHP8pUBDqvkAaarh3E/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_isv.module.css"; // plasmic-import: 7Kb5LCV89tNWBn4m3y5e9q/projectcss
import sty from "./PlasmicCheckout.module.css"; // plasmic-import: jvNNS1u1VD/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: AUsPFN29Z5Y/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: q1TlDUyNqop/icon
import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: TZ5ExugZ2/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: k5kwo7sOrBj/icon

export type PlasmicCheckout__VariantMembers = {
  isEmpty: "isEmpty";
};

export type PlasmicCheckout__VariantsArgs = {
  isEmpty?: SingleBooleanChoiceArg<"isEmpty">;
};

type VariantPropType = keyof PlasmicCheckout__VariantsArgs;
export const PlasmicCheckout__VariantProps = new Array<VariantPropType>(
  "isEmpty"
);

export type PlasmicCheckout__ArgsType = {
  totalPrice?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCheckout__ArgsType;
export const PlasmicCheckout__ArgProps = new Array<ArgPropType>("totalPrice");

export type PlasmicCheckout__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  lineItems?: p.Flex<"div">;
  scrollSpace?: p.Flex<"div">;
  invalidData?: p.Flex<"div">;
  nameInput?: p.Flex<typeof TextInput>;
  emailInput?: p.Flex<typeof TextInput>;
  backBtn?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  checkoutBtn?: p.Flex<typeof Button>;
  loading?: p.Flex<typeof Loading>;
};

export interface DefaultCheckoutProps {}

function PlasmicCheckout__RenderFunc(props: {
  variants: PlasmicCheckout__VariantsArgs;
  args: PlasmicCheckout__ArgsType;
  overrides: PlasmicCheckout__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root,
            { [sty.rootisEmpty]: hasVariant(variants, "isEmpty", "isEmpty") }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__hwmO, {
                [sty.freeBoxisEmpty__hwmOfod6B]: hasVariant(
                  variants,
                  "isEmpty",
                  "isEmpty"
                )
              })}
            >
              {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rbicr,
                    {
                      [sty.textisEmpty__rbicrfod6B]: hasVariant(
                        variants,
                        "isEmpty",
                        "isEmpty"
                      )
                    }
                  )}
                >
                  {"Nenhum item foi adicionado."}
                </div>
              ) : null}
            </div>
          ) : null}
          {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__dJbT1, {
                [sty.freeBoxisEmpty__dJbT1Fod6B]: hasVariant(
                  variants,
                  "isEmpty",
                  "isEmpty"
                )
              })}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"lineItems"}
                data-plasmic-override={overrides.lineItems}
                hasGap={true}
                className={classNames(projectcss.all, sty.lineItems)}
              >
                {true ? (
                  <ShoppingCartLineItem
                    className={classNames(
                      "__wab_instance",
                      sty.shoppingCartLineItem__lC9Px,
                      {
                        [sty.shoppingCartLineItemisEmpty__lC9Pxfod6B]:
                          hasVariant(variants, "isEmpty", "isEmpty")
                      }
                    )}
                    even={true}
                  />
                ) : null}
                {true ? (
                  <ShoppingCartLineItem
                    className={classNames(
                      "__wab_instance",
                      sty.shoppingCartLineItem__sDpv3
                    )}
                  />
                ) : null}
                {true ? (
                  <ShoppingCartLineItem
                    className={classNames(
                      "__wab_instance",
                      sty.shoppingCartLineItem__fgOd
                    )}
                    even={true}
                  />
                ) : null}
              </p.Stack>

              <div
                data-plasmic-name={"scrollSpace"}
                data-plasmic-override={overrides.scrollSpace}
                className={classNames(projectcss.all, sty.scrollSpace)}
              />
            </div>
          ) : null}
          {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__e1Rk, {
                [sty.freeBoxisEmpty__e1RkFod6B]: hasVariant(
                  variants,
                  "isEmpty",
                  "isEmpty"
                )
              })}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__xwlAe)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Cm0P
                    )}
                  >
                    {"Total: R$ "}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__zIai4)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "20,00",
                      value: args.totalPrice,
                      className: classNames(sty.slotTargetTotalPrice)
                    })}
                  </div>
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"invalidData"}
                  data-plasmic-override={overrides.invalidData}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.invalidData,
                    {
                      [sty.invalidDataisEmpty]: hasVariant(
                        variants,
                        "isEmpty",
                        "isEmpty"
                      )
                    }
                  )}
                >
                  {"Dados inv√°lidos"}
                </div>
              ) : null}

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rW7Tu)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ngWcr
                  )}
                >
                  {"Nome"}
                </div>

                <TextInput
                  data-plasmic-name={"nameInput"}
                  data-plasmic-override={overrides.nameInput}
                  className={classNames("__wab_instance", sty.nameInput)}
                  name={"name" as const}
                  placeholder={"" as const}
                  required={true}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nmWzQ)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__idsbd
                  )}
                >
                  {"Email"}
                </div>

                <TextInput
                  data-plasmic-name={"emailInput"}
                  data-plasmic-override={overrides.emailInput}
                  className={classNames("__wab_instance", sty.emailInput)}
                  name={"email" as const}
                  required={true}
                  type={"email" as const}
                />
              </p.Stack>

              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__h27MF)}>
                  <Button
                    data-plasmic-name={"backBtn"}
                    data-plasmic-override={overrides.backBtn}
                    className={classNames("__wab_instance", sty.backBtn)}
                    color={"softBlue" as const}
                    showStartIcon={true}
                    startIcon={
                      <PlusIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dk1Tj
                      )}
                    >
                      {"Adicionar mais"}
                    </div>
                  </Button>

                  <Button
                    data-plasmic-name={"checkoutBtn"}
                    data-plasmic-override={overrides.checkoutBtn}
                    className={classNames("__wab_instance", sty.checkoutBtn)}
                    color={"blue" as const}
                    showStartIcon={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__csUxJ
                      )}
                    >
                      {"Finalizar compra"}
                    </div>
                  </Button>
                </div>
              ) : null}
            </p.Stack>
          ) : null}

          <Loading
            data-plasmic-name={"loading"}
            data-plasmic-override={overrides.loading}
            className={classNames("__wab_instance", sty.loading)}
            hide={true}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "lineItems",
    "scrollSpace",
    "invalidData",
    "nameInput",
    "emailInput",
    "backBtn",
    "svg",
    "checkoutBtn",
    "loading"
  ],
  header: ["header"],
  lineItems: ["lineItems"],
  scrollSpace: ["scrollSpace"],
  invalidData: ["invalidData"],
  nameInput: ["nameInput"],
  emailInput: ["emailInput"],
  backBtn: ["backBtn", "svg"],
  svg: ["svg"],
  checkoutBtn: ["checkoutBtn"],
  loading: ["loading"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  lineItems: "div";
  scrollSpace: "div";
  invalidData: "div";
  nameInput: typeof TextInput;
  emailInput: typeof TextInput;
  backBtn: typeof Button;
  svg: "svg";
  checkoutBtn: typeof Button;
  loading: typeof Loading;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCheckout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCheckout__VariantsArgs;
    args?: PlasmicCheckout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCheckout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCheckout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCheckout__ArgProps,
          internalVariantPropNames: PlasmicCheckout__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCheckout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheckout";
  } else {
    func.displayName = `PlasmicCheckout.${nodeName}`;
  }
  return func;
}

export const PlasmicCheckout = Object.assign(
  // Top-level PlasmicCheckout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    lineItems: makeNodeComponent("lineItems"),
    scrollSpace: makeNodeComponent("scrollSpace"),
    invalidData: makeNodeComponent("invalidData"),
    nameInput: makeNodeComponent("nameInput"),
    emailInput: makeNodeComponent("emailInput"),
    backBtn: makeNodeComponent("backBtn"),
    svg: makeNodeComponent("svg"),
    checkoutBtn: makeNodeComponent("checkoutBtn"),
    loading: makeNodeComponent("loading"),

    // Metadata about props expected for PlasmicCheckout
    internalVariantProps: PlasmicCheckout__VariantProps,
    internalArgProps: PlasmicCheckout__ArgProps
  }
);

export default PlasmicCheckout;
/* prettier-ignore-end */
