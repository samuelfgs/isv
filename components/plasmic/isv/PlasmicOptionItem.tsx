// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Kb5LCV89tNWBn4m3y5e9q
// Component: YCWt9QOvru
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import AddItemRow from "../../AddItemRow"; // plasmic-import: VyP48T0NTA/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../copy_of_plasmic_kit_q_4_color_tokens/plasmic_copy_of_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: r6wqTHP8pUBDqvkAaarh3E/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_isv.module.css"; // plasmic-import: 7Kb5LCV89tNWBn4m3y5e9q/projectcss
import sty from "./PlasmicOptionItem.module.css"; // plasmic-import: YCWt9QOvru/css

export type PlasmicOptionItem__VariantMembers = {};

export type PlasmicOptionItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicOptionItem__VariantsArgs;
export const PlasmicOptionItem__VariantProps = new Array<VariantPropType>();

export type PlasmicOptionItem__ArgsType = {
  label?: React.ReactNode;
  rows?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOptionItem__ArgsType;
export const PlasmicOptionItem__ArgProps = new Array<ArgPropType>(
  "label",
  "rows"
);

export type PlasmicOptionItem__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultOptionItemProps {
  label?: React.ReactNode;
  rows?: React.ReactNode;
  className?: string;
}

function PlasmicOptionItem__RenderFunc(props: {
  variants: PlasmicOptionItem__VariantsArgs;
  args: PlasmicOptionItem__ArgsType;
  overrides: PlasmicOptionItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
          plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__gq7RN)}>
          {p.renderPlasmicSlot({
            defaultContents: "Sabor do Pastel",
            value: args.label,
            className: classNames(sty.slotTargetLabel)
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__o6Z9)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <AddItemRow
                  className={classNames("__wab_instance", sty.addItemRow__jbpW)}
                  isFirstRow={true}
                />

                <AddItemRow
                  className={classNames(
                    "__wab_instance",
                    sty.addItemRow__ptJ6O
                  )}
                  isSelected={true}
                />

                <AddItemRow
                  className={classNames(
                    "__wab_instance",
                    sty.addItemRow__ffpmc
                  )}
                />
              </React.Fragment>
            ),
            value: args.rows
          })}
        </div>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOptionItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOptionItem__VariantsArgs;
    args?: PlasmicOptionItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOptionItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOptionItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOptionItem__ArgProps,
      internalVariantPropNames: PlasmicOptionItem__VariantProps
    });

    return PlasmicOptionItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOptionItem";
  } else {
    func.displayName = `PlasmicOptionItem.${nodeName}`;
  }
  return func;
}

export const PlasmicOptionItem = Object.assign(
  // Top-level PlasmicOptionItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicOptionItem
    internalVariantProps: PlasmicOptionItem__VariantProps,
    internalArgProps: PlasmicOptionItem__ArgProps
  }
);

export default PlasmicOptionItem;
/* prettier-ignore-end */
