// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Kb5LCV89tNWBn4m3y5e9q
// Component: hCmOmN_odDK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ContentfulFetcher } from "../../contentful"; // plasmic-import: AIFoPRZ0EI/codeComponent
import AddItemRow from "../../AddItemRow"; // plasmic-import: VyP48T0NTA/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../copy_of_plasmic_kit_q_4_color_tokens/plasmic_copy_of_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: r6wqTHP8pUBDqvkAaarh3E/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_isv.module.css"; // plasmic-import: 7Kb5LCV89tNWBn4m3y5e9q/projectcss
import sty from "./PlasmicAddItemOption.module.css"; // plasmic-import: hCmOmN_odDK/css

createPlasmicElementProxy;

export type PlasmicAddItemOption__VariantMembers = {};
export type PlasmicAddItemOption__VariantsArgs = {};
type VariantPropType = keyof PlasmicAddItemOption__VariantsArgs;
export const PlasmicAddItemOption__VariantProps = new Array<VariantPropType>();

export type PlasmicAddItemOption__ArgsType = {
  currentQuantity?: React.ReactNode;
  id?: any;
};
type ArgPropType = keyof PlasmicAddItemOption__ArgsType;
export const PlasmicAddItemOption__ArgProps = new Array<ArgPropType>(
  "currentQuantity",
  "id"
);

export type PlasmicAddItemOption__OverridesType = {
  root?: p.Flex<"div">;
  contentfulFetcher?: p.Flex<typeof ContentfulFetcher>;
  addItemRow?: p.Flex<typeof AddItemRow>;
};

export interface DefaultAddItemOptionProps {
  currentQuantity?: React.ReactNode;
  id?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAddItemOption__RenderFunc(props: {
  variants: PlasmicAddItemOption__VariantsArgs;
  args: PlasmicAddItemOption__ArgsType;
  overrides: PlasmicAddItemOption__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <ContentfulFetcher
        data-plasmic-name={"contentfulFetcher"}
        data-plasmic-override={overrides.contentfulFetcher}
        className={classNames("__wab_instance", sty.contentfulFetcher)}
        contentType={"menuItemOption"}
        entryID={(() => {
          try {
            return $props.id ?? "5cO5YwXaNu1Va5AoONVcoJ";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "40KJD7INRJVICcoyX7F2Pv";
            }
            throw e;
          }
        })()}
        limit={1000}
        noLayout={false}
      >
        <ph.DataCtxReader>
          {$ctx => (
            <React.Fragment>
              <div className={classNames(projectcss.all, sty.freeBox___3Xeyx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3SKAx
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.contentfulMenuitemoptionItem.fields.label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Sabor do Pastel";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__q66S3)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "0",
                    value: args.currentQuantity
                  })}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__l4TsI
                    )}
                  >
                    <React.Fragment>
                      {"/" +
                        ($ctx.contentfulMenuitemoptionItem?.fields?.maximum ??
                          1)}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__jeZf)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return (
                        $ctx.contentfulMenuitemoptionItem.fields?.values ?? []
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentOptionValue = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xExz7)}
                      key={currentIndex}
                    >
                      <AddItemRow
                        data-plasmic-name={"addItemRow"}
                        data-plasmic-override={overrides.addItemRow}
                        className={classNames("__wab_instance", sty.addItemRow)}
                        menuOptionId={(() => {
                          try {
                            return $ctx.contentfulMenuitemoptionItem.sys.id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        menuOptionValueId={(() => {
                          try {
                            return currentOptionValue.sys.id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        price={
                          (() => {
                            try {
                              return (
                                currentOptionValue.fields.price !== undefined
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lMsAr
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "R$ " +
                                      currentOptionValue.fields.price.toFixed(2)
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Enter some text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null
                        }
                        price2={
                          (() => {
                            try {
                              return (
                                currentOptionValue.fields.price !== undefined
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___7V9Oz
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "R$ " +
                                      currentOptionValue.fields.price.toFixed(2)
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Enter some text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wpgIy
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentOptionValue.fields.label;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Enter some text";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </AddItemRow>
                    </div>
                  );
                })}
              </div>
            </React.Fragment>
          )}
        </ph.DataCtxReader>
      </ContentfulFetcher>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "contentfulFetcher", "addItemRow"],
  contentfulFetcher: ["contentfulFetcher", "addItemRow"],
  addItemRow: ["addItemRow"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  contentfulFetcher: typeof ContentfulFetcher;
  addItemRow: typeof AddItemRow;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddItemOption__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddItemOption__VariantsArgs;
    args?: PlasmicAddItemOption__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAddItemOption__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAddItemOption__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAddItemOption__ArgProps,
          internalVariantPropNames: PlasmicAddItemOption__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddItemOption__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddItemOption";
  } else {
    func.displayName = `PlasmicAddItemOption.${nodeName}`;
  }
  return func;
}

export const PlasmicAddItemOption = Object.assign(
  // Top-level PlasmicAddItemOption renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentfulFetcher: makeNodeComponent("contentfulFetcher"),
    addItemRow: makeNodeComponent("addItemRow"),

    // Metadata about props expected for PlasmicAddItemOption
    internalVariantProps: PlasmicAddItemOption__VariantProps,
    internalArgProps: PlasmicAddItemOption__ArgProps
  }
);

export default PlasmicAddItemOption;
/* prettier-ignore-end */
