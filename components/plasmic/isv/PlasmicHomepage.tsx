// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Kb5LCV89tNWBn4m3y5e9q
// Component: nz4OkXyiCp9B

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: oeaZd66p84/component
import { ContentfulFetcher } from "../../contentful"; // plasmic-import: AIFoPRZ0EI/codeComponent
import Separator from "../../Separator"; // plasmic-import: wUTVsB-fca/component
import MenuItem from "../../MenuItem"; // plasmic-import: XSxN5kXvF2/component
import { ContentfulRichText } from "../../contentful"; // plasmic-import: U_PL4X9jnS/codeComponent
import CartButton from "../../CartButton"; // plasmic-import: xK4LVBS1m4/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../copy_of_plasmic_kit_q_4_color_tokens/plasmic_copy_of_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: r6wqTHP8pUBDqvkAaarh3E/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_isv.module.css"; // plasmic-import: 7Kb5LCV89tNWBn4m3y5e9q/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: nz4OkXyiCp9B/css

import ClockIcon from "./icons/PlasmicIcon__Clock"; // plasmic-import: QYb9XxFjU/icon
import PinIcon from "./icons/PlasmicIcon__Pin"; // plasmic-import: LZ6zTV9o3/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {
  closed: "closed";
};
export type PlasmicHomepage__VariantsArgs = {
  closed?: SingleBooleanChoiceArg<"closed">;
};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "closed"
);

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  event?: Flex__<typeof ContentfulFetcher>;
  img?: Flex__<typeof PlasmicImg__>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  separator?: Flex__<typeof Separator>;
  options?: Flex__<"div">;
  menuItem?: Flex__<typeof MenuItem>;
  contentfulRichText?: Flex__<typeof ContentfulRichText>;
  cartButton?: Flex__<typeof CartButton>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "closed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.closed
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root,
            { [sty.rootclosed]: hasVariant($state, "closed", "closed") }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header, {
              [sty.headerclosed]: hasVariant($state, "closed", "closed")
            })}
          />

          <ContentfulFetcher
            data-plasmic-name={"event"}
            data-plasmic-override={overrides.event}
            className={classNames("__wab_instance", sty.event)}
            contentType={"event"}
            entryID={"3kx01giGi4y6Sw5tJNnkcU"}
            limit={1000}
            noLayout={true}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__wFFs9)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $ctx.contentfulEventItem.fields.featuredImage
                            .fields.file.url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cwUK)}
                    >
                      <ClockIcon
                        className={classNames(projectcss.all, sty.svg__oMGgd)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xHyN7
                        )}
                      >
                        {"23 de julho"}
                      </div>
                    </Stack__>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wrEd8)}
                    >
                      <Stack__
                        as={PlasmicLink__}
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link
                        )}
                        component={Link}
                        href={
                          "https://www.google.com/maps/place/R.+Jardel+Fran%C3%A7a,+18+-+Cidade+N%C3%A1utica,+S%C3%A3o+Vicente+-+SP,+11340-340/@-23.952288,-46.411209,16z/data=!4m5!3m4!1s0x94ce1b90972cbc35:0xcd547d49f39bffe5!8m2!3d-23.9522879!4d-46.4112093"
                        }
                        platform={"nextjs"}
                        target={"_blank"}
                      >
                        <PinIcon
                          className={classNames(projectcss.all, sty.svg__cwMa)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__m09Xo
                          )}
                        >
                          {"Rua Jardel Fran\u00e7a, 18"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tc74K
                        )}
                      >
                        <ClockIcon
                          className={classNames(projectcss.all, sty.svg__gJ7Hc)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hS2Be
                          )}
                        >
                          {"12 de agosto \u00e0s 18:00"}
                        </div>
                      </Stack__>
                    </div>
                  </Stack__>
                  <Separator
                    data-plasmic-name={"separator"}
                    data-plasmic-override={overrides.separator}
                    className={classNames("__wab_instance", sty.separator)}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dg52T)}
                    id={"menu"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hEwy6,
                        {
                          [sty.textclosed__hEwy6JsbhE]: hasVariant(
                            $state,
                            "closed",
                            "closed"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "closed", "closed")
                        ? "VENDAS ENCERRADAS!"
                        : "Almo\u00e7o AD 20"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"options"}
                      data-plasmic-override={overrides.options}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.options)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return (
                              $ctx.contentfulEventItem.fields.menu ?? []
                            ).sort((a, b) => a.fields.order - b.fields.order);
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <MenuItem
                            data-plasmic-name={"menuItem"}
                            data-plasmic-override={overrides.menuItem}
                            className={classNames(
                              "__wab_instance",
                              sty.menuItem,
                              {
                                [sty.menuItemclosed]: hasVariant(
                                  $state,
                                  "closed",
                                  "closed"
                                )
                              }
                            )}
                            description={
                              <ContentfulRichText
                                data-plasmic-name={"contentfulRichText"}
                                data-plasmic-override={
                                  overrides.contentfulRichText
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.contentfulRichText
                                )}
                                richText={(() => {
                                  try {
                                    return currentItem.fields.description;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            }
                            id={(() => {
                              try {
                                return currentItem.sys.id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            image={(() => {
                              try {
                                return currentItem.fields.image.fields.file.url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            price={
                              (() => {
                                try {
                                  return currentItem.fields.price !== undefined;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return `R$ ${currentItem.fields.price.toFixed(
                                        2
                                      )}`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "R$ 20,00";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : null
                            }
                            title={
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.fields.name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Combo 1";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            }
                          />
                        );
                      })}
                    </Stack__>
                  </Stack__>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ContentfulFetcher>
          <CartButton
            data-plasmic-name={"cartButton"}
            data-plasmic-override={overrides.cartButton}
            className={classNames("__wab_instance", sty.cartButton)}
            isEmpty={true}
          />
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "event",
    "img",
    "link",
    "separator",
    "options",
    "menuItem",
    "contentfulRichText",
    "cartButton"
  ],
  header: ["header"],
  event: [
    "event",
    "img",
    "link",
    "separator",
    "options",
    "menuItem",
    "contentfulRichText"
  ],
  img: ["img"],
  link: ["link"],
  separator: ["separator"],
  options: ["options", "menuItem", "contentfulRichText"],
  menuItem: ["menuItem", "contentfulRichText"],
  contentfulRichText: ["contentfulRichText"],
  cartButton: ["cartButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  event: typeof ContentfulFetcher;
  img: typeof PlasmicImg__;
  link: "a";
  separator: typeof Separator;
  options: "div";
  menuItem: typeof MenuItem;
  contentfulRichText: typeof ContentfulRichText;
  cartButton: typeof CartButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    event: makeNodeComponent("event"),
    img: makeNodeComponent("img"),
    link: makeNodeComponent("link"),
    separator: makeNodeComponent("separator"),
    options: makeNodeComponent("options"),
    menuItem: makeNodeComponent("menuItem"),
    contentfulRichText: makeNodeComponent("contentfulRichText"),
    cartButton: makeNodeComponent("cartButton"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
