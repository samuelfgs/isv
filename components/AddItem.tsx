// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicAddItem,
  DefaultAddItemProps
} from "./plasmic/isv/PlasmicAddItem";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { usePlasmicQueryData } from "@plasmicapp/query";
import { CredentialsContext } from "./contentful";
import { ensure } from "../lib/common";
import * as Contentful from "contentful";

export interface AddItemProps extends DefaultAddItemProps {
  onBack: () => void;
  onAdd: (productId: string | undefined, variantId: string, entry: any) => void;
}

function AddItem_(props: AddItemProps, ref: HTMLElementRefOf<"div">) {
  const { onBack, onAdd, ...rest } = props;
  const entryId = props.entryId;

  const [selectedValues, setSelectedValues] = React.useState<Record<string, string>>({})

  const onOptionSelect = (optionId: string | undefined, optionValueId: string | undefined ) => {
    if (optionId && optionValueId) {
      setSelectedValues(curr => ({
        ...curr,
        [optionId]: optionValueId
      }));
    }
  }
  
  const creds = ensure(React.useContext(CredentialsContext));
  const cacheKey = JSON.stringify({
    creds,
  });
  const client = Contentful.createClient({
    space: creds.space,
    accessToken: creds.accessToken,
  });
  const { data, error: entryDataError } = usePlasmicQueryData<
    any | null
  >(entryId ? `${cacheKey}/entry/${entryId}` : null, async () => {
    const response = await client.getEntry(`${entryId}`, { include: 2 });
    return response;
  });

  console.log("dale", data, Object.keys(selectedValues).length, data?.fields.options.length);
  
  return <PlasmicAddItem 
    root={{ ref }} 
    {...rest} 
    back={{
      wrap: (node) => <div onClick={() => onBack()}>{node}</div>
    }}
    addItemRow={{
      onSelect: onOptionSelect,
      selectedValues
    }}
    repeatedAddItemRow={{
      onSelect: onOptionSelect,
      selectedValues
    }}
    selectedOptionValues={{
      children: (
        Object.entries(selectedValues)
          .map(([optionId, optionValueId]) => 
            <div>
              {data?.fields.options
                .find((option: any) => option.sys.id === optionId)
                ?.fields.values.find((optionValue: any) => optionValue.sys.id === optionValueId)
                ?.fields.label
              }
            </div>
          )
      )
    }}
    button={{
      isDisabled: Object.keys(selectedValues).length !== data?.fields.options.length,
      onClick: () => onAdd(entryId, JSON.stringify(Object.values(selectedValues).sort()), data)
    }}
  />;
}

const AddItem = React.forwardRef(AddItem_);
export default AddItem;