// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicShoppingCartLineItem,
  DefaultShoppingCartLineItemProps
} from "./plasmic/isv/PlasmicShoppingCartLineItem";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { Product } from "../lib/common";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface ShoppingCartLineItemProps extends Omit<DefaultShoppingCartLineItemProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultShoppingCartLineItemProps altogether and have
// total control over the props for your component.
export interface ShoppingCartLineItemProps
  extends DefaultShoppingCartLineItemProps {
    quantity: number;
    onChangeQuantity: (q: number) => void;
    product: Product;
}

function ShoppingCartLineItem_(
  props: ShoppingCartLineItemProps,
  ref: HTMLElementRefOf<"div">
) {
  const { quantity, onChangeQuantity, product, ...rest } = props;
  return (
    <PlasmicShoppingCartLineItem root={{ ref }} {...rest}
      quantity={{
        quantity,
        onChangeQuantity
      }}
      optionValues={{
        children: (
          Object.entries(product.optionValues)
            .sort(([_a, {optionId: optionIdA }], [_b, {optionId: optionIdB}]) => 
              product.product?.fields.options.findIndex((option: any) => option.sys.id === optionIdA) - 
              product.product?.fields.options.findIndex((option: any) => option.sys.id === optionIdB)
            )
            .map(([_, { optionId, valueId, quantity }]) => 
              <div>
                {product.product?.fields.options
                  .find((option: any) => option.sys.id === optionId)?.fields.maximum !== undefined
                  ? `${quantity}x `
                  : ``
                }
                {product.product?.fields.options
                  .find((option: any) => option.sys.id === optionId)
                  ?.fields.values.find((currOptionValue: any) => currOptionValue.sys.id === valueId)
                  ?.fields.label
                }
              </div>
            )
        )
      }}
    />
  );
}

const ShoppingCartLineItem = React.forwardRef(ShoppingCartLineItem_);
export default ShoppingCartLineItem;
