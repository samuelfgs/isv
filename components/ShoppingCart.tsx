// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicShoppingCart,
  DefaultShoppingCartProps
} from "./plasmic/isv/PlasmicShoppingCart";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import ShoppingCartLineItem from "./ShoppingCartLineItem";
import { addToCart, Cart, LineItem } from "../lib/cart";
import { formatPrice } from "../lib/common";

export interface ShoppingCartProps extends DefaultShoppingCartProps {
  cart: Cart;
  isLoading: boolean;
  setCart: React.Dispatch<React.SetStateAction<Cart>>;
  onBack: () => void;
  onCheckout: (name: string, email: string) => void;
}

function isValidEmail(email: string) {
  return /\S+@\S+\.\S+/.test(email);
}

function ShoppingCart_(props: ShoppingCartProps, ref: HTMLElementRefOf<"div">) {
  const { cart, setCart, onBack, onCheckout, isLoading, ...rest } = props;
  const [ invalidState, setInvalidState ] = React.useState(false);
  const [ name, setName ] = React.useState<string>(cart.name);
  const [ email, setEmail ] = React.useState<string>(cart.email);

  return <PlasmicShoppingCart 
    root={{ ref }} 
    {...rest} 
    lineItems={{
      children: cart.lineItems.map((item, i) => (
        <ShoppingCartLineItem
          index={i+1}
          name={item.product.fields.name}
          price={`R$ ${formatPrice(item.product.fields.price * item.quantity)}`}
          even={i%2 === 1}
          quantity={item.quantity}
          onChangeQuantity={(newQuantity) => addToCart(item.productId, item.variantId, newQuantity, item.product, setCart)}
          selectedValues={JSON.parse(item.variantId)}
          product={item.product}
        />
      )
    )}}
    isEmpty={cart.lineItems.length === 0}
    totalPrice={cart.totalPrice.toFixed(2)}
    backBtn={{
      onClick: onBack
    }}
    checkoutBtn={{
      onClick: () => {
        if (!name || !email || !isValidEmail(email)) {
          setInvalidState(true);
        } else {
          onCheckout(name, email);
        }
      }
    }}
    nameInput={{
      value: name,
      onChange: (e) => {
        setName(e.target.value);
        setCart(c => ({ ...c, name: e.target.value }));
        setInvalidState(false);
      }
    }}
    emailInput={{
      value: email,
      onChange: (e) => {
        setEmail(e.target.value);
        setCart(c => ({ ...c, email: e.target.value }));
        setInvalidState(false);
      }
    }}
    loading={{
      hide: !isLoading
    }}
    invalidData={{
      render: (props, Component) => invalidState ? <Component {...props} /> : null
    }}
  />;
}

const ShoppingCart = React.forwardRef(ShoppingCart_);
export default ShoppingCart;
