// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicAddItemRow,
  DefaultAddItemRowProps
} from "./plasmic/isv/PlasmicAddItemRow";
import { fetchContentfulEntry } from "./contentful";
import { useSnapshot } from "valtio";
import { addProductState, OptionType } from "../lib/state-management";

export interface AddItemRowProps extends DefaultAddItemRowProps {
}

function AddItemRow_(props: AddItemRowProps) {
  const { ...rest } = props;
  
  const ref = React.createRef<HTMLDivElement>();
  const [optionId, setOptionId] = React.useState<string>("");
  const [optionValueId, setOptionValueId] = React.useState<string>("");
  
  React.useEffect(() => {
    if (ref.current) {
      setOptionId(ref.current.attributes.getNamedItem("data-menuoption-id")?.value ?? "");
      setOptionValueId(ref.current.attributes.getNamedItem("data-menuoptionvalue-id")?.value ?? "");
    }
  }, [ref])
  const optionEntry = fetchContentfulEntry(optionId);
  const { optionValues, optionsType, sumOfOptionValuesQuantity } = useSnapshot(addProductState);
  const optionType = optionsType[optionId];
  const isSelected = optionValues[optionValueId] !== undefined;
  const quantity = isSelected ? optionValues[optionValueId]!.quantity : undefined;

  console.log(optionEntry);
  return <PlasmicAddItemRow 
    root={{
      ref,
      onClick: () => {
        if (optionType === OptionType.single) {
          if (addProductState.selectedOptionValue[optionId] in addProductState.optionValues) {
            delete addProductState.optionValues[
              addProductState.selectedOptionValue[optionId]
            ];
          }
          addProductState.optionValues[optionValueId] = {
            optionId,
            valueId: optionValueId,
            quantity: 1,
          }
          addProductState.selectedOptionValue[optionId] = optionValueId;
          addProductState.sumOfOptionValuesQuantity[optionId] = 1;
        }
      }
    }} 
    isSelected={isSelected}
    showQuantity={
      optionType === OptionType.multi
      ? (quantity! > 0 ? "notInitial" : "initial")
      : undefined
    }
    showPrice={optionEntry?.fields.values.find((val: any) => val.sys.id === optionValueId)?.fields.price !== undefined}
    quantity={{
      quantity,
      disablePlusButton: optionEntry?.fields.maximum === sumOfOptionValuesQuantity[optionId],
      onChangeQuantity: (newQuantity) => {
        if (!(optionValueId in addProductState.optionValues)) {
          addProductState.optionValues[optionValueId] = {
            optionId,
            valueId: optionValueId,
            quantity: newQuantity
          }
          addProductState.sumOfOptionValuesQuantity[optionId] += newQuantity;
        }
        addProductState.sumOfOptionValuesQuantity[optionId] += newQuantity - addProductState.optionValues[optionValueId].quantity!;
        if (newQuantity === 0) {
          delete addProductState.optionValues[optionValueId];
        } else {
          addProductState.optionValues[optionValueId].quantity = newQuantity;
        }
      }
    }}
    {...rest} 
  />;
}

const AddItemRow = React.forwardRef(AddItemRow_);
export default AddItemRow;
